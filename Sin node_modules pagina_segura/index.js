import express from 'express'
import jwt from 'jsonwebtoken'
import cookieParser from 'cookie-parser'
import { PORT, SECRET_JWT_KEY } from './config.js'
import { UserRepository } from './user-repository.js'

const app = express()

// Configura EJS como motor de vistas
app.set('view engine', 'ejs')

// Middlewares para procesar JSON y cookies
app.use(express.json())
app.use(cookieParser())

// Middleware para gestionar la sesión del usuario
app.use((req, res, next) => {
  const token = req.cookies.access_token
  req.session = { user: null }

  try {
    const data = jwt.verify(token, SECRET_JWT_KEY)
    req.session.user = data
  } catch {
    // Ignorar error si el token no es válido
  }

  next() // Continuar con la siguiente ruta o middleware
})

// Ruta principal
app.get('/', (req, res) => {
  const { user } = req.session
  res.render('index', user)
})

// Ruta para iniciar sesión
app.post('/login', async (req, res) => {
  const { username, password } = req.body

  try {
    const user = await UserRepository.login({ username, password })
    const token = jwt.sign(
      { id: user._id, username: user.username },
      SECRET_JWT_KEY,
      {
        expiresIn: '1h'
      }
    )
    res
      .cookie('access_token', token, {
        httpOnly: true, // La cookie solo se puede acceder en el servidor
        secure: process.env.NODE_ENV === 'production',
        sameSite: 'strict',
        maxAge: 1000 * 60 * 60 // 1 hora
      })
      .send({ user, token })
  } catch (error) {
    res.status(401).send(error.message)
  }
})

// Ruta para registrar un nuevo usuario
app.post('/register', async (req, res) => {
  const { username, password } = req.body

  try {
    const id = await UserRepository.create({ username, password })
    res.send({ id })
  } catch (error) {
    res.status(400).send(error.message)
  }
})

// Ruta para cerrar sesión
app.post('/logout', (req, res) => {
  res.clearCookie('access_token').redirect('/login')
})

// Ruta protegida
app.get('/protected', (req, res) => {
  const { user } = req.session
  if (!user) return res.status(403).send('Access not Authorized')
  res.render('protected', user) // _id, username
})

// Configuración del servidor
const HOST = '0.0.0.0'

app.listen(PORT, HOST, () => {
  console.log(`Servidor corriendo en http://${HOST}:${PORT}`)
})
