import DBLocal from 'db-local'
import crypto from 'node:crypto'
import bcrypt from 'bcrypt'
import { SALT_ROUNDS } from './config.js'

const { Schema } = new DBLocal({ path: './db' })

const User = Schema('User', {
  _id: { type: String, required: true },
  username: { type: String, required: true },
  password: { type: String, required: true },
  failedAttempts: { type: Number, default: 0 }, // Campo para los intentos fallidos
  lockTimeEnd: { type: Number, default: 0 } // Tiempo en el que se desbloqueará el acceso
})

const maxAttempts = 3
const lockTime = 5 * 60 * 1000 // Bloqueo por 5 minutos

export class UserRepository {
  static async create ({ username, password }) {
    // 1. Validaciones del username (opcional: usar zod)
    Validation.username(username)
    Validation.password(password)

    // 2. Asegurarse que el username no existe
    const user = User.findOne({ username })
    if (user) throw new Error('username already exists')

    const id = crypto.randomUUID()
    const hashedPassword = await bcrypt.hash(password, SALT_ROUNDS)

    User.create({
      _id: id,
      username,
      password: hashedPassword
    }).save()

    return id
  }

  static async login ({ username, password }) {
    Validation.username(username)
    Validation.password(password)

    // Buscar el usuario por su nombre de usuario
    const user = User.findOne({ username })
    if (!user) throw new Error('username does not exists')

    // Verificar si el acceso está bloqueado
    if (user.lockTimeEnd && Date.now() < user.lockTimeEnd) {
      throw new Error('Demasiados intentos fallidos. Inténtalo más tarde.')
    }

    // Verificar la contraseña
    const isValid = await bcrypt.compare(password, user.password)
    if (!isValid) {
      // Incrementar el contador de intentos fallidos
      user.failedAttempts += 1
      if (user.failedAttempts >= maxAttempts) {
        // Si se exceden los intentos, bloquear el acceso por un tiempo
        user.lockTimeEnd = Date.now() + lockTime
        user.save()
        throw new Error(`Demasiados intentos fallidos. Acceso bloqueado durante ${lockTime / 1000 / 60} minutos.`)
      } else {
        user.save()
        throw new Error(`Intento fallido ${user.failedAttempts} de ${maxAttempts}.`)
      }
    }

    // Si la contraseña es válida, restablecer los intentos fallidos
    user.failedAttempts = 0
    user.save()

    // Eliminar la contraseña del objeto de usuario antes de devolverlo
    const { password: _, ...publicUser } = user

    return publicUser
  }
}

class Validation {
  static username (username) {
    if (typeof username !== 'string') throw new Error('username must be a string')
    if (username.length < 3) throw new Error('username must be at least 3 characters long')
  }

  static password (password) {
    if (typeof password !== 'string') throw new Error('password must be a string')
    if (password.length < 6) throw new Error('password must be at least 6 characters long')
  }
}
